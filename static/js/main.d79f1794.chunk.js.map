{"version":3,"sources":["Sequencer/Sequencer.js","App.js","serviceWorker.js","index.js"],"names":["Bar","props","state","hover","value","max","e","this","setState","key","id","className","onMouseEnter","enter","onMouseLeave","leave","style","height","React","Component","Sequencer","bars","Array","from","length","isDrawing","console","log","map","b","Math","round","onClick","updateAtPosition","onMouseMove","drawIfClicked","onMouseDown","startDrawing","onMouseUp","stopDrawing","i","min","debug","pageX","currentTarget","offsetLeft","pageY","offsetTop","offsetHeight","offsetWidth","x","width","percHeight","barId","floor","clientX","clientY","nativeEvent","offsetX","offsetY","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mRAGMA,G,kBACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXC,OAAO,EACPC,MAAO,EAAKH,MAAMI,KALH,E,mEAQbC,GACJC,KAAKC,SAAS,CAACL,OAAO,M,4BAGlBG,GACJC,KAAKC,SAAS,CAACL,OAAO,M,+BAGd,IAAD,OACP,OACE,yBACEM,IAAKF,KAAKN,MAAMS,GAChBC,UAAW,QAAUJ,KAAKL,MAAMC,MAAQ,QAAU,IAClDS,aAAc,SAAAN,GAAC,OAAI,EAAKO,MAAMP,IAC9BQ,aAAc,SAAAR,GAAC,OAAI,EAAKS,MAAMT,IAC9BU,MAAO,CAACC,OAA2B,IAAnBV,KAAKN,MAAMG,MAAc,W,GAxB/Bc,IAAMC,YAoHTC,E,YApFb,WAAYnB,GAAQ,IAAD,sBACjB,4CAAMA,IAGN,IAAMoB,EAAOC,MAAMC,KACjB,CAACC,OAAQ,KACT,SAAClB,GAAD,MAAQ,CAAEF,MAAO,MANF,OASjB,EAAKF,MAAQ,CACXmB,OACAI,WAAW,GAXI,E,0EAgBNnB,GACXC,KAAKC,SAAS,CAACiB,WAAW,M,kCAGhBnB,GACVC,KAAKC,SAAS,CAACiB,WAAW,IAC1BC,QAAQC,IAAIpB,KAAKL,MAAMmB,KAAKO,KAAI,SAAAC,GAAC,OAAIC,KAAKC,MAAgB,IAAVF,EAAEzB,a,+BAG1C,IAAD,OACP,OACE,yBACIO,UAAU,YACVqB,QAAS,SAAA1B,GAAC,OAAI,EAAK2B,iBAAiB3B,IACpCQ,aAAc,SAAAR,GAAC,OAAI,EAAKE,SAAS,CAACiB,WAAW,KAC7CS,YAAa,SAAA5B,GAAC,OAAI,EAAK6B,cAAc7B,IACrC8B,YAAa,SAAA9B,GAAC,OAAI,EAAK+B,aAAa/B,IACpCgC,UAAW,SAAAhC,GAAC,OAAI,EAAKiC,YAAYjC,KAElCC,KAAKL,MAAMmB,KAAKO,KAAI,SAACC,EAAGW,GAAJ,OACnB,kBAAC,EAAD,CACE/B,IAAK+B,EACL9B,GAAI8B,EACJnC,IAAK,EAAKJ,MAAMI,IAChBoC,IAAK,EAAKxC,MAAMwC,IAChBrC,MAAOyB,EAAEzB,c,oCAQLE,GACTC,KAAKL,MAAMuB,WACZlB,KAAK0B,iBAAiB3B,K,uCAITA,GACfoB,QAAQgB,MAAMpC,GADI,MAEY,CAC5BA,EAAEqC,MAAQrC,EAAEsC,cAAcC,WAC1BvC,EAAEwC,MAAQxC,EAAEsC,cAAcG,UAC1BzC,EAAEsC,cAAcI,aAChB1C,EAAEsC,cAAcK,aAJXC,EAFW,KAEGC,EAFH,KAQZC,EAAa,EARD,UASZC,EAAQvB,KAAKwB,MAAMJ,GAAMC,EAAQ5C,KAAKN,MAAMoB,OAE5CA,EAAOd,KAAKL,MAAMmB,KACxBA,EAAKgC,GAAOjD,MAAQgD,EACpB7C,KAAKC,SAAS,CAACa,W,+BAIRf,GACPoB,QAAQC,IAAIrB,GACZoB,QAAQC,IAAIrB,EAAEiD,QAASjD,EAAEkD,SACzB9B,QAAQC,IAAIrB,EAAEmD,YAAYC,QAASpD,EAAEmD,YAAYE,SACjDjC,QAAQC,IAAIrB,EAAEsC,mB,GA7EM1B,IAAMC,W,MClBfyC,MAZf,WACE,OACE,yBAAKjD,UAAU,OACb,kBAAC,EAAD,CACEN,IAAK,EACLoC,IAAK,EACLpB,KAAM,OCEMwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d79f1794.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Sequencer.css';\r\n\r\nclass Bar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      hover: false,\r\n      value: this.props.max\r\n    };\r\n  }\r\n  enter(e) {\r\n    this.setState({hover: true});\r\n  }\r\n\r\n  leave(e) {\r\n    this.setState({hover: false});\r\n  }\r\n  \r\n  render() {\r\n    return(\r\n      <div\r\n        key={this.props.id}\r\n        className={\"bar \" + (this.state.hover ? \"hover\" : \"\")} \r\n        onMouseEnter={e => this.enter(e)}\r\n        onMouseLeave={e => this.leave(e)}\r\n        style={{height: this.props.value * 100 + \"%\"}}\r\n\r\n        />\r\n    );\r\n  }\r\n}\r\n\r\nclass Sequencer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    \r\n    const bars = Array.from(\r\n      {length: 10}, \r\n      (e) => ({ value: 1 })\r\n    );\r\n    \r\n    this.state = {\r\n      bars,\r\n      isDrawing: false\r\n    }\r\n\r\n  }\r\n\r\n  startDrawing(e) {\r\n    this.setState({isDrawing: true});\r\n  }\r\n\r\n  stopDrawing(e) {\r\n    this.setState({isDrawing: false})\r\n    console.log(this.state.bars.map(b => Math.round(b.value * 100)))\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div \r\n          className=\"sequencer\"\r\n          onClick={e => this.updateAtPosition(e)}\r\n          onMouseLeave={e => this.setState({isDrawing: false})}\r\n          onMouseMove={e => this.drawIfClicked(e)}\r\n          onMouseDown={e => this.startDrawing(e)}\r\n          onMouseUp={e => this.stopDrawing(e)}\r\n          >\r\n        {this.state.bars.map((b, i) => \r\n          <Bar \r\n            key={i} \r\n            id={i} \r\n            max={this.props.max}\r\n            min={this.props.min}\r\n            value={b.value}\r\n            />\r\n        )}\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n  drawIfClicked(e) {\r\n    if(this.state.isDrawing) {\r\n      this.updateAtPosition(e);\r\n    }\r\n  }\r\n\r\n  updateAtPosition(e) {\r\n    console.debug(e);\r\n    const [x, y, height, width] = [\r\n      e.pageX - e.currentTarget.offsetLeft, \r\n      e.pageY - e.currentTarget.offsetTop,\r\n      e.currentTarget.offsetHeight,\r\n      e.currentTarget.offsetWidth\r\n    ];\r\n    const percHeight = 1 - y / height;\r\n    const barId = Math.floor(x / ( width / this.props.bars));\r\n\r\n    const bars = this.state.bars;\r\n    bars[barId].value = percHeight;\r\n    this.setState({bars})\r\n\r\n  }\r\n\r\n  barClick(e) {\r\n    console.log(e);\r\n    console.log(e.clientX, e.clientY);\r\n    console.log(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\r\n    console.log(e.currentTarget);\r\n  }\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default Sequencer;\r\n","import React from 'react';\nimport Sequencer from './Sequencer/Sequencer.js';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Sequencer \n        max={1}\n        min={0}\n        bars={10}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}