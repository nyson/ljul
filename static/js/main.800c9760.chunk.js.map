{"version":3,"sources":["Sequencer/Bar.js","Sequencer/Sequencer.js","App.js","serviceWorker.js","index.js"],"names":["Bar","props","state","hover","value","max","color","e","this","setState","highlight","key","id","className","style","backgroundColor","height","onMouseEnter","enter","onMouseLeave","leave","React","Component","Sequencer","barId","xpos","width","Math","floor","bars","Array","from","length","isDrawing","colors","genColorScheme","baseColor","Prando","name","col","i2RGB","parseInt","x","hex2","pow","red","green","blue","rgb","map","toString","join","hex1","rng","hexBase","hex2RGB","i","cols","header","hexAdd","bg","rngCol","bar","barSelected","RGB2hex","g","next","onUpdate","onClick","updateAtPosition","stopDrawing","onMouseMove","drawIfClicked","onMouseDown","startDrawing","onMouseUp","b","min","pageX","currentTarget","offsetLeft","pageY","offsetTop","offsetHeight","offsetWidth","y","h","w","updateBar","updater","App","seqs","pink","levels","round","st","forceUpdate","update","visualise","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.800c9760.chunk.js","sourcesContent":["import React from 'react';\n\nexport class Bar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hover: false,\n      value: this.props.max,\n      color: this.props.color\n    };\n  }\n  enter(e) {\n    this.setState({ color: this.props.highlight });\n  }\n  leave(e) {\n    this.setState({ color: this.props.color });\n  }\n  render() {\n    return (\n      <div\n        key={this.props.id}\n        className=\"bar\"\n        style={{backgroundColor: this.state.color,\n                height: this.props.value * 100 + \"%\"\n               }}\n        onMouseEnter={e => this.enter(e)}\n        onMouseLeave={e => this.leave(e)}\n      />);\n  }\n}\n","import React from 'react';\nimport './Sequencer.css';\nimport { Bar } from './Bar';\nimport Prando from 'prando';\n\n\n\nclass Sequencer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const bars = Array.from(\n      {length: this.props.bars},\n      (e) => ({ value: 1 })\n    );\n\n    this.state = {\n      bars,\n      isDrawing: false,\n      colors: this.genColorScheme(\n        this.props.baseColor,\n        new Prando(this.props.name))\n    };\n  }\n\n  hex2RGB(col) {\n    return this.i2RGB(parseInt(col, 16));\n  }\n\n  i2RGB(x) {\n    const hex2 = Math.pow(16, 2);\n    return {\n      red: Math.floor(x / Math.pow(16, 4)),\n      green: Math.floor(x / hex2) % hex2,\n      blue: x % hex2\n    };\n  }\n\n  RGB2hex(rgb) {\n    return [rgb.red, rgb.green, rgb.blue]\n      .map(x => Math.floor(x).toString(16))\n      .join(\"\");\n  }\n\n  hexAdd(hex1, hex2) {\n    return {\n      red: hex1.red + hex2.red,\n      blue: hex1.blue + hex2.blue,\n      green: hex1.green + hex2.green\n    };\n  }\n \n  genColorScheme(col, rng) {\n    const hexBase = this.hex2RGB(col);\n    for(const i in hexBase) hexBase[i] /= 2;\n    const cols = {\n      header: this.hexAdd(hexBase, this.hex2RGB(\"111111\")),\n      bg: this.hexAdd(hexBase, this.rngCol(rng)),\n      bar: this.hexAdd(hexBase, this.rngCol(rng)),\n      barSelected: this.hexAdd(hexBase, this.rngCol(rng))\n    };\n    for(const i in cols) cols[i] = this.RGB2hex(cols[i]);\n    return cols;\n  }\n\n  rngCol(rng) {\n    const g = () => rng.next(0, Math.pow(16, 2) / 2);\n    const r = {\n      red: g(),\n      blue: g(),\n      green: g()\n    };\n    return r;\n  }\n\n  startDrawing(e) {\n    this.setState({isDrawing: true});\n  }\n\n  stopDrawing(e) {\n    this.setState({isDrawing: false});\n    this.props.onUpdate(this.state.bars);\n  }\n\n  render() {\n    return (\n      <>\n        <h3\n          style={{backgroundColor: '#' + this.state.colors.header}}\n        >{this.props.name}</h3>\n        <div\n          className=\"sequencer\"\n          style={{backgroundColor: '#' + this.state.colors.bg}}\n          onClick={e => {\n            this.updateAtPosition(e);\n            this.stopDrawing(e);\n          }}\n          onMouseLeave={e => this.setState({isDrawing: false})}\n          onMouseEnter={e => this.setState({isDrawing: false})}\n          onMouseMove={e => this.drawIfClicked(e)}\n          onMouseDown={e => this.startDrawing(e)}\n          onMouseUp={e => this.stopDrawing(e)}\n        >\n          {this.state.bars.map(\n            (b, i) =>\n              <Bar\n                highlight={'#' + this.state.colors.barSelected}\n                color={'#' + this.state.colors.bar}\n                key={i}\n                id={i}\n                max={this.props.max}\n                min={this.props.min}\n                value={b.value}\n              />)}\n\n        </div>\n      </>\n    );\n  }\n\n  barId = (xpos, width) => Math.floor(xpos / (width / this.props.bars));\n\n  drawIfClicked(e) {\n    if(this.state.isDrawing) {\n      this.updateAtPosition(e);\n    }\n  }\n\n\n  updateAtPosition(e) {\n    const [x, y, h, w] = [\n      e.pageX - e.currentTarget.offsetLeft,\n      e.pageY - e.currentTarget.offsetTop,\n      e.currentTarget.offsetHeight,\n      e.currentTarget.offsetWidth\n    ];\n\n    this.updateBar(\n      this.barId(x,w),\n      bar => bar.value = 1-y/h\n      );\n  }\n\n  updateBar(id, updater) {\n    const bars = this.state.bars;\n    updater(bars[id]);\n    this.setState({bars});\n  }\n}\n\nexport default Sequencer;\n","import React from 'react';\nimport Sequencer from './Sequencer/Sequencer.js';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      min: 0,\n      max: 1,\n      bars: 32,\n      seqs: {\n        pink:  [],\n        red:   [],\n        green: [],\n        blue:  []\n      }\n    };\n  }\n\n  visualise(levels) {\n    return \"levels: \" + levels\n      .map(b => Math.round(b.value * 100))\n      .join(\"|\");\n  }\n  update(st) {\n    this.setState({...st});\n    this.forceUpdate();\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Sequencer\n          max={this.state.max}\n          min={this.state.min}\n          bars={this.state.bars}\n          baseColor=\"ef0ad4\"\n          name=\"Pink\"\n          onUpdate={bars => {\n            const st = this.state;\n            st.seqs.pink = bars;\n            this.update(st);\n          }}\n        />\n        <pre>{this.visualise(this.state.seqs.pink)}</pre>\n\n        <Sequencer\n          max={this.state.max}\n          min={this.state.min}\n          bars={this.state.bars}\n          baseColor=\"ff0000\"\n          name=\"Red\"\n          onUpdate={bars => {\n            const st = this.state;\n            st.seqs.red = bars;\n            this.update(st);\n          }}\n        />\n        <pre>{this.visualise(this.state.seqs.red)}</pre>\n\n        <Sequencer\n          max={this.state.max}\n          min={this.state.min}\n          bars={this.state.bars}\n          baseColor=\"00ff00\"\n          name=\"Green\"\n          onUpdate={bars => {\n            const st = this.state;\n            st.seqs.green = bars;\n            this.update(st);\n          }}\n        />\n        <pre>{this.visualise(this.state.seqs.green)}</pre>\n\n        <Sequencer\n          max={this.state.max}\n          min={this.state.min}\n          bars={this.state.bars}\n          baseColor=\"0000ff\"\n          name=\"Blue\"\n          onUpdate={bars => {\n            const st = this.state;\n            st.seqs.blue = bars;\n            this.update(st);\n          }}\n        />\n        <pre>{this.visualise(this.state.seqs.blue)}</pre>\n\n      </div>\n\n      );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}